[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Hello, I am Lexi! I am currently a student at Georgetown College majoring in marketing and minoring in Computer Science. I am currently a senior, and plan to graduate this December of 2023."
  },
  {
    "objectID": "about.html#early-present-life",
    "href": "about.html#early-present-life",
    "title": "About Me",
    "section": "Early/ Present Life",
    "text": "Early/ Present Life\n\nI am from a small town in Mt. Washington, Kentucky which is about 30 minutes away from Louisville. Throughout my younger years all the way up to college I played basketball which constantly kept me busy. Growing up I have lived in Mt Washington with my mom, dad and my sister. My sister is two years older than me and just recently got married in September. I also have a cat named Binx. I got him about two years ago from the Lexington Humane Society. In my free time I enjoy spending time with my friends and family, shopping, and going on walks."
  },
  {
    "objectID": "about.html#future-life",
    "href": "about.html#future-life",
    "title": "About Me",
    "section": "Future Life",
    "text": "Future Life\nAfter I graduate Georgeotwn College I plan on pursuing a job in sales. Preferably I would like to do something in the medical sales field. Although this is something I am very interested in now, I did not always know that was the path I wanted to take. Going into college I was unsure which route I wanted to pursue, but after taking some classes and experiencing new things marketing began to spark my interest."
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "Blogs",
    "section": "",
    "text": "The blogs on this site.."
  },
  {
    "objectID": "articles/index.html",
    "href": "articles/index.html",
    "title": "Articles",
    "section": "",
    "text": "The articles on this site are here to demonstrate how to properly solve two problems from the Eloquent Javascript book. These problems include the Math.min Function and Recursion."
  },
  {
    "objectID": "articles/article_01.html",
    "href": "articles/article_01.html",
    "title": "Minimum Function",
    "section": "",
    "text": "Below I have described a solution to the Minimum problem in Chapter 3 of the Eloquent Javascript book.\nThe problem is described in full here.\n\nMinimum\nThe previous chapter introduced the standard function Math.min that returns its smallest argument. We can build something like that now. Write a function min that takes two arguments and returns their minimum.\nIf you have trouble putting braces and parentheses in the right place to get a valid function definition, start by copying one of the examples in this chapter and modifying it.\nA function may contain multiple return statements.\n\nIn the remainder of the article I have provided a detailed explanation of the solution-code."
  },
  {
    "objectID": "articles/article_01.html#introduction-to-the-problem",
    "href": "articles/article_01.html#introduction-to-the-problem",
    "title": "Minimum Function",
    "section": "",
    "text": "Below I have described a solution to the Minimum problem in Chapter 3 of the Eloquent Javascript book.\nThe problem is described in full here.\n\nMinimum\nThe previous chapter introduced the standard function Math.min that returns its smallest argument. We can build something like that now. Write a function min that takes two arguments and returns their minimum.\nIf you have trouble putting braces and parentheses in the right place to get a valid function definition, start by copying one of the examples in this chapter and modifying it.\nA function may contain multiple return statements.\n\nIn the remainder of the article I have provided a detailed explanation of the solution-code."
  },
  {
    "objectID": "articles/article_01.html#explaining-the-solution",
    "href": "articles/article_01.html#explaining-the-solution",
    "title": "Minimum Function",
    "section": "Explaining the Solution",
    "text": "Explaining the Solution\nTo see the solution to the Minimum function problem in the GitHub browser click here.\nfunction min(a,b) {\n    if (a &lt; b) return a;\n    else return b;\n}\nconsole.log(Math.min(0, 10));\nconsole.log(Math.min(0, -10));"
  },
  {
    "objectID": "articles/article_01.html#explanation",
    "href": "articles/article_01.html#explanation",
    "title": "Minimum Function",
    "section": "Explanation:",
    "text": "Explanation:\nfunction min(a,b) {\n    if (a &lt; b) return a;\n    else return b;\n}\nThis function takes two parameters “a” and “b”. These two values then get compared. If “a” is less than “b” then “a” will be returned. If “b” is less than “a” the function will return “b”."
  },
  {
    "objectID": "articles/article_01.html#test-the-code",
    "href": "articles/article_01.html#test-the-code",
    "title": "Minimum Function",
    "section": "Test the Code:",
    "text": "Test the Code:\nconsole.log(Math.min(0, 10));\nconsole.log(Math.min(0, -10));\n 0\n-10\nThese lines of code are used to test the function that was made.\nThe first console.log line calls Math.min with the arguments 0 and 10. Since 0 is the minimum value, it should be printed out to the console.\nThe next console.log line calls Math.min with arguments 0 and -10. Since -10 is the minimum value, it should be printed out to the console."
  },
  {
    "objectID": "articles/article_02.html",
    "href": "articles/article_02.html",
    "title": "Recursion Function",
    "section": "",
    "text": "Below I have described a solution to the Recursion problem in Chapter 3 of the Eloquent Javascript book.\nThe problem is described in full here.\n\nRecursion\nWe’ve seen that % (the remainder operator) can be used to test whether a number is even or odd by using % 2 to see whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd:\nZero is even.\nOne is odd.\nFor any other number N, its evenness is the same as N - 2.\nDefine a recursive function isEven corresponding to this description. The function should accept a single parameter (a positive, whole number) and return a Boolean.\nTest it on 50 and 75. See how it behaves on -1. Why? Can you think of a way to fix this?\nYour function will likely look somewhat similar to the inner find function in the recursive findSolution example in this chapter, with an if/else if/else chain that tests which of the three cases applies. The final else, corresponding to the third case, makes the recursive call. Each of the branches should contain a return statement or in some other way arrange for a specific value to be returned.\nWhen given a negative number, the function will recurse again and again, passing itself an ever more negative number, thus getting further and further away from returning a result. It will eventually run out of stack space and abort.\n\nIn the remainder of the article I have provided a detailed explanation of the solution-code."
  },
  {
    "objectID": "articles/article_02.html#introduction-to-the-problem",
    "href": "articles/article_02.html#introduction-to-the-problem",
    "title": "Recursion Function",
    "section": "",
    "text": "Below I have described a solution to the Recursion problem in Chapter 3 of the Eloquent Javascript book.\nThe problem is described in full here.\n\nRecursion\nWe’ve seen that % (the remainder operator) can be used to test whether a number is even or odd by using % 2 to see whether it’s divisible by two. Here’s another way to define whether a positive whole number is even or odd:\nZero is even.\nOne is odd.\nFor any other number N, its evenness is the same as N - 2.\nDefine a recursive function isEven corresponding to this description. The function should accept a single parameter (a positive, whole number) and return a Boolean.\nTest it on 50 and 75. See how it behaves on -1. Why? Can you think of a way to fix this?\nYour function will likely look somewhat similar to the inner find function in the recursive findSolution example in this chapter, with an if/else if/else chain that tests which of the three cases applies. The final else, corresponding to the third case, makes the recursive call. Each of the branches should contain a return statement or in some other way arrange for a specific value to be returned.\nWhen given a negative number, the function will recurse again and again, passing itself an ever more negative number, thus getting further and further away from returning a result. It will eventually run out of stack space and abort.\n\nIn the remainder of the article I have provided a detailed explanation of the solution-code."
  },
  {
    "objectID": "articles/article_02.html#explaining-the-solution",
    "href": "articles/article_02.html#explaining-the-solution",
    "title": "Recursion Function",
    "section": "Explaining the Solution",
    "text": "Explaining the Solution\nTo see the solution to the Recursion Function problem in the GitHub browser click here.\n isEven = function(number) {\n    if (number == 0)\n        return true;\n    else if (number == 1)\n        return false;\n    else if (number &lt; 0)\n        return isEven(-number);\n    else\n        return isEven(number - 2);\n}\nconsole.log(isEven(50));\nconsole.log(isEven(75));\nconsole.log(isEven(-1));"
  },
  {
    "objectID": "articles/article_02.html#explanation",
    "href": "articles/article_02.html#explanation",
    "title": "Recursion Function",
    "section": "Explanation:",
    "text": "Explanation:\n isEven = function(number) {\n    if (number == 0)\n        return true;\n    else if (number == 1)\n        return false;\n    else if (number &lt; 0)\n        return isEven(-number);\n    else\n        return isEven(number - 2);\n}\nThis code creates a function that checks for evenness. If the number is equal to zero, then the function will immediately return true which indicates that zero is an even number. If the number is equal to one, the function returns false, which indicated one is an odd number. If none of these lines are true, it checks to see if number is less than zero. If the number is negative, it converts it to positive. Lastly, the function subtracts 2 from the number and continues the process until it reaches one."
  },
  {
    "objectID": "articles/article_02.html#test-the-code",
    "href": "articles/article_02.html#test-the-code",
    "title": "Recursion Function",
    "section": "Test the Code:",
    "text": "Test the Code:\nconsole.log(isEven(50));\nconsole.log(isEven(75));\nconsole.log(isEven(-1));\ntrue\nfalse\nfalse\nThese lines of code are used to test the function that was made.\nSince 50 is an even number, the console should print true.\nSince 75 is an odd number, the console should print out false.\nSince 1 is not an even number, the console should print out false."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "Welcome to my Website Warmup! This website serves as a personal website for myself that can be a starting point for a future website that I may design for myself or someone else one day.\nYou can read a bit about me here."
  }
]